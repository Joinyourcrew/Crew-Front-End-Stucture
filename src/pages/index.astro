---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Crew - Your Web App">
	<main>
		<nav class="top-menu">
			<ul>
				<li><a href="/">Home</a></li>
				<li><a href="/tokenomics">Tokenomics</a></li>
				<li><a href="/join-a-crew">Join a Crew</a></li>
				<li><a href="/dream">Dream</a></li>
				<li><a href="/documentation">Documentation</a></li>
			</ul>
		</nav>

		<h1>Welcome to <span class="app-name">Crew</span></h1>
		<p class="tagline">
			Collaborate. Create. Conquer.
		</p>

		<!-- Removed "About Crew" and "Get Started" sections -->

	</main>
  <footer>
    <p>
      <a href="https://x.com">X (Twitter)</a> | <a href="https://github.com">GitHub</a>
    </p>
  </footer>

  <!-- Canvas for the background -->
  <canvas id="bgCanvas"></canvas>

</Layout>

<style>
  /* General layout to ensure the footer sticks to the bottom */
  /* html, body styles moved to Layout.astro */

	main {
		margin: auto;
		padding: 2rem; /* Increased padding */
		width: 800px;
		max-width: calc(100% - 4rem); /* Adjusted max-width */
		text-align: center; /* Center content */
    flex: 1; /* Allow main to grow and take available space */
    position: relative; /* Ensure main is above the canvas */
    z-index: 1; /* Place above canvas */
	}

	.top-menu {
		margin-bottom: 3rem; /* Space below the menu */
	}

	.top-menu ul {
		list-style: none;
		padding: 0;
		margin: 0;
		display: flex; /* Arrange items horizontally */
		justify-content: center; /* Center the menu items */
		gap: 2rem; /* Space between menu items */
	}

	.top-menu li {
		display: inline-block; /* Ensure list items are inline */
	}

	.top-menu a {
		text-decoration: none;
		color: rgba(var(--light-blue), 0.9); /* Menu link color */
		font-size: 1.1rem; /* Smaller font size for menu */
		transition: color 0.3s ease;
	}

	.top-menu a:hover {
		color: rgb(var(--light-blue)); /* Highlight on hover */
	}


	h1 {
		font-size: 4rem;
		font-weight: 700;
		line-height: 1;
		margin-bottom: 0.5em; /* Reduced bottom margin */
		color: white; /* Keep the main title white for contrast */
	}

	.app-name {
		/* Use light blue for the app name */
		color: rgb(var(--light-blue));
		/* Make the font thinner */
		font-weight: 400;
	}

	.tagline {
		font-size: 1.5rem;
		margin-bottom: 2rem;
		color: rgba(var(--light-blue), 0.8); /* Slightly less opaque light blue */
	}

	/* Removed styles for .content-section */

	/* Remove default Astro styles that are not needed */
	.astro-a, .instructions, .link-card-grid {
		display: none;
	}
  footer {
    margin-top: 2rem;
    text-align: right; /* Align footer content to the right */
    padding-right: 2rem; /* Add some padding to the right edge */
    position: relative; /* Ensure footer is above the canvas */
    z-index: 1; /* Place above canvas */
    width: 100%; /* Ensure footer spans full width */
    box-sizing: border-box; /* Include padding in width */
  }

  footer a {
    color: rgba(var(--light-blue), 0.9);
    text-decoration: none;
    transition: color 0.3s ease;
  }

  footer a:hover {
    color: rgb(var(--light-blue));
  }
</style>

<script>
  // This script runs on the client side
  const canvas = document.getElementById('bgCanvas');
  const ctx = canvas.getContext('2d');

  // Resize canvas to fit window
  function resizeCanvas() {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
  }
  window.addEventListener('resize', resizeCanvas);
  resizeCanvas();

  // Particle class
  class Particle {
      constructor() {
          this.angle = Math.random() * Math.PI * 2;
          this.radius = Math.random() * Math.min(canvas.width, canvas.height) * 0.4;
          this.speed = Math.random() * 0.005 + 0.002; // Slow speed for tranquil motion
          this.size = Math.random() * 2 + 1; // Small square size for pixel effect
          this.color = `hsl(200, 50%, ${Math.random() * 10 + 20}%)`; // Brighter dark blue pixels
      }

      update() {
          // Slow circular motion for radar-like sweep
          this.angle += this.speed;
          this.x = canvas.width / 2 + Math.cos(this.angle) * this.radius;
          this.y = canvas.height / 2 + Math.sin(this.angle) * this.radius;

          // Wrap angle for continuous rotation
          if (this.angle > Math.PI * 2) this.angle -= Math.PI * 2;
      }

      draw() {
          ctx.fillStyle = this.color;
          // Draw square pixels
          ctx.fillRect(this.x - this.size / 2, this.y - this.size / 2, this.size, this.size);
      }
  }

  // Initialize particles
  const particles = [];
  const particleCount = 300; // Dense for radar effect
  for (let i = 0; i < particleCount; i++) {
      particles.push(new Particle());
  }

  // Connect particles with deep blue lines
  function connectParticles() {
      for (let i = 0; i < particles.length; i++) {
          for (let j = i + 1; j < particles.length; j++) {
              const dx = particles[i].x - particles[j].x;
              const dy = particles[i].y - particles[j].y;
              const distance = Math.sqrt(dx * dx + dy * dy);
              if (distance < 60) {
                  ctx.strokeStyle = `rgba(0, 50, 100, ${0.08 - distance / 600})`; // Deep blue lines
                  ctx.lineWidth = 0.4;
                  ctx.beginPath();
                  ctx.moveTo(particles[i].x, particles[i].y);
                  ctx.lineTo(particles[j].x, particles[j].y);
                  ctx.stroke();
              }
          }
      }
  }

  // Animation loop
  function animate() {
      ctx.fillStyle = 'rgba(0, 0, 0, 0.1)'; // Gentle fade for black background
      ctx.fillRect(0, 0, canvas.width, canvas.height);

      particles.forEach(particle => {
          particle.update();
          particle.draw();
      });

      connectParticles();
      requestAnimationFrame(animate);
  }

  animate();
</script>
